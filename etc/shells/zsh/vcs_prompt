# zshrc/85_git_prompt
#
# Make git information available to the prompt
#
# Copyright © 1994–2008 martin f. krafft <madduck@madduck.net>
# Released under the terms of the Artistic Licence 2.0
#
# Source repository: http://git.madduck.net/v/etc/zsh.git
#
# Shamelessly based on http://glandium.org/blog/?p=170
#
# display version control information on right side of prompt if $VCS is set {{{
# based on Mike Hommey's http://web.glandium.org/blog/?p=170

autoload colors && colors


__vcs_dir() {
    local vcs base_dir sub_dir ref

    __precmd() {
         local git_dir branch

         psvar=()
         git_dir=$(git-rev-parse --git-dir 2> /dev/null) || return
         if test -d "$git_dir/../.dotest"; then
             if test -f "$git_dir/../.dotest/rebasing"; then
                 psvar[3]="rebase"
             elif test -f "$git_dir/../.dotest/applying"; then
                 psvar[3]="am"
             else
                 psvar[3]="am/rebase"
             fi
             branch="$(git-symbolic-ref HEAD 2>/dev/null)"
         elif test -f "$git_dir/.dotest-merge/interactive"; then
             psvar[3]="rebase -i"
             branch="$(cat "$git_dir/.dotest-merge/head-name")"
         elif test -d "$git_dir/.dotest-merge"; then
             psvar[3]="rebase -m"
             branch="$(cat "$git_dir/.dotest-merge/head-name")"
         elif test -f "$git_dir/MERGE_HEAD"; then
             psvar[3]="merge"
             branch="$(git symbolic-ref HEAD 2>/dev/null)"
         else
             test -f "$git_dir/BISECT_LOG" && psvar[3]="bisect"
             branch="$(git symbolic-ref HEAD 2>/dev/null)" || \
                 branch="$(git describe --exact-match HEAD 2>/dev/null)" || \
                 branch="$(cut -c1-7 "$git_dir/HEAD")..."
         fi

         psvar[1]="${$(readlink -f ${git_dir:h})/$HOME/~}"
         psvar[2]="${branch#refs/heads/}"
     }
     _mad_prompt_setup() {
         local rst
         local -a pcc

         rst="%{$reset_color%}"
         pcc[1]="%{$reset_color${1:-$fg_no_bold[green]}%}"
         pcc[2]="%{$reset_color${2:-$fg_no_bold[yellow]}%}"
         pcc[3]="%{$reset_color${3:-$fg_no_bold[cyan]}%}"
         pcc[4]="%{$reset_color${4:-$fg_bold[red]}%}"

     #%{$'\e[s\e[A\e[4Dblah\e[u'$reset_color%}
     #%{$'\e[400C\e[20D'%}"--------------------------------
         PROMPT="\
     $pcc[1]--(%B%T$pcc[1])----%(1v.<$pcc[3]%1v %B%U%2v%u%(3v.$pcc[4] <%3v>.)$pcc[1]>.)----
     $pcc[1]--[$pcc[2]%{%(?..%S)%}%m%s$pcc[1]] $rst"
         RPROMPT="$pcc[1](%B%~$pcc[1])$rst"
         POSTEDIT=$reset_color
     }

    sub_dir() {
      local sub_dir
      sub_dir=$(readlink -f "${PWD}")
      sub_dir=${sub_dir#$1}
      echo ${sub_dir#/}
    }

    git_dir() {
      base_dir=$(git-rev-parse --show-cdup 2>/dev/null) || return 1
      base_dir=$(readlink -f "$base_dir/..")
      sub_dir=$(git-rev-parse --show-prefix)
      sub_dir=${sub_dir%/}
      ref=$(git-symbolic-ref -q HEAD || git-name-rev --name-only HEAD 2>/dev/null)
      ref=${ref#refs/heads/}
      vcs="git"
    }

    svn_dir() {
      [[ -d ".svn" ]] || return 1
      base_dir="."
      while [[ -d "$base_dir/../.svn" ]]; do base_dir="$base_dir/.."; done
      base_dir=$(readlink -f "$base_dir")
      sub_dir=$(sub_dir "${base_dir}")
      ref=$(svn info "$base_dir" | awk '/^URL/ { sub(".*/","",$0); r=$0 } /^Revision/ { sub("[^0-9]*","",$0); print r":"$0 }')
      vcs="svn"
    }

    svk_dir() {
        [[ -f ~/.svk/config ]] || return 1
        base_dir=$(awk '/: *$/ { sub(/^ */,"",$0); sub(/: *$/,"",$0); if (match("'${PWD}'", $0"(/|$)")) { print $0; d=1; } } /depotpath/ && d == 1 { sub(".*/","",$0); r=$0 } /revision/ && d == 1 { print r ":" $2; exit 1 }' ~/.svk/config) && return 1
        ref=${base_dir##*
  }
        base_dir=${base_dir%%
  *}
        sub_dir=$(sub_dir "${base_dir}")
        vcs="svk"
    }

    hg_dir() {
        base_dir="."
        while [[ ! -d "$base_dir/.hg" ]]; do
            base_dir="$base_dir/.."
            [[ $(readlink -f "${base_dir}") = "/" ]] && return 1
        done
        base_dir=$(readlink -f "$base_dir")
        sub_dir=$(sub_dir "${base_dir}")
        ref=$(< "${base_dir}/.hg/branch")
        vcs="hg"
    }

    hg_dir  ||
    git_dir ||
    svn_dir ||
    svk_dir # ||
  #  base_dir="$PWD"
  #  echo "${vcs:+($vcs)}${base_dir/$HOME/~}${vcs:+[$ref]${sub_dir}}"
    
}

__git_get_reporoot()
{
  # return the full path to the root of the current git repository
  local relroot
  relroot="$(git rev-parse --show-cdup 2>/dev/null)" || return 1
  if [ -n "$relroot" ]; then
    readlink -f "$relroot"
  else
    echo $PWD
  fi
}

__git_get_branch()
{
  # return the name of the git branch we're on
  local ref
  ref=$(git symbolic-ref -q HEAD 2>/dev/null \
     || git-name-rev --name-only HEAD 2>/dev/null) || return 1
  echo "${ref#refs/heads/}"
}

__hg_get_reporoot()
{
  hg root
}

__hg_get_branch()
{
  echo "hg:$(hg branch)"
}

__bzr_get_reporoot()
{
  local reporoot
  reporoot="$(bzr info | sed -rne 's, *branch root: ,,p')"
  case "$reporoot" in
    .) echo "$PWD";;
    *) echo "$reporoot";;
  esac
}

__bzr_get_branch()
{
  local branch revno
  bzr version-info | while read i j; do
      case "$i" in
        revno:) revno="$j";;
        branch-nick:) branch="$j";;
      esac
    done
  echo "bzr:${branch}@$revno"
}

__vcs_get_repo_type()
{
  # return the type of the closest repository in the path hierarchy
  local dir
  while true; do
    [ -d ${dir}.git ] && echo git && break
    [ -d ${dir}.bzr ] && echo bzr && break
    [ -d ${dir}.hg ] && echo hg && break
    [ "$(readlink -f ${dir:-.})" = / ] && echo NONE && break
    dir="../$dir"
  done
}

__vcs_get_prompt_path_components()
{
  # return formatted path components (prefix branch postfix) given
  # the repository root and the branch.

  # shortcut: if there are no arguments, return a default prompt
  if [ -z "${1:-}" ]; then
    pwdnamed="%${_PROMPT_PATH_MAXLEN}<..<%~%<<"
    pwdnamed="${(%)pwdnamed}"
    echo "$pwdnamed"
    return
  fi

  local reporoot branch workdir
  workdir=''
  reporoot="${1%%/}"
  branch="$2"

  # replace named directories in the PWD, we need thi for the proper component
  # count later
  local pwdnamed="%~"
  pwdnamed="${(%)pwdnamed}"

  # store paths in arrays for component count calculation
  typeset -la apwd apwdnamed areporoot
  apwd=(${(s:/:)PWD})
  apwdnamed=(${(s:/:)pwdnamed})
  areporoot=(${(s:/:)reporoot})

  # get the number of leading and trailing path components. Since we're using
  # %~ later and then /home/madduck suddenly becomes ~, which is 1, not
  # 2 components, we calculate the leading component count by using the named
  # path and the number of post components
  local precomps postcomps
  postcomps=$(($#apwd - $#areporoot))
  precomps=$(($#apwdnamed - $postcomps))

  local postfix
  if (( $postcomps > 0 )); then
    postfix="%${postcomps}~"
    postfix="${(%)postfix}"
  fi
  
  # we don't want the prompt to get too long, so keep the total prompt length
  # under $_PROMPT_PATH_MAXLEN (25), but ensure that the prefix is not shorter
  # than $_PROMPT_PATH_MINLEN (10), no matter what
  local prelen minlen prefix
  prelen=$((${_PROMPT_PATH_MAXLEN:-25} - $#branch - $#postfix))
  minlen=${_PROMPT_PATH_MINLEN:-10}
  (( $prelen < $minlen )) && prelen=$minlen
  prefix="%${prelen}<..<%-${precomps}~%<<"
  prefix="${(%)prefix}"

  echo "$prefix" "$branch" "$postfix"
}

__vcs_set_prompt_variables()
{
  # set psvar[1..3] depending on repo type, or just psvar[1] if no repo found
  local reporoot branch repotype workdir
  workdir=''
  repotype="${1:-$(__vcs_get_repo_type)}"

  case "$repotype" in
    git)
      reporoot="$(__git_get_reporoot)" ||
        { error "could not determine git repository root"; return 1 }
      branch="$(__git_get_branch)" ||
        { error "could not determine git branch"; return 1 }
      ;;
    hg)
      reporoot="$(__hg_get_reporoot)" ||
        { error "could not determine hg repository root"; return 1 }
      branch="$(__hg_get_branch)" ||
        { error "could not determine hg branch"; return 1 }
      ;;
    bzr)
      reporoot="$(__bzr_get_reporoot)" ||
        { error "could not determine bzr repository root"; return 1 }
      branch="$(__bzr_get_branch)" ||
        { error "could not determine bzr branch"; return 1 }
      ;;
    *)
      case "$repotype" in
        NONE) :;;
        *) warn "$repotype repositories not (yet) supported in the prompt";;
      esac
      local p="%${MAXLEN}<..<%~%<<"
      #TODO find a better way so we don't have to nuke $psvar, but since the
      #     %(nv.true.false) check for prompts checks element count, not
      #     content, that's all we get for now
      psvar=("${(%)p}")
      return
  esac

  set -- $(__vcs_get_prompt_path_components "$reporoot" "$branch")
  psvar[1]="$1"
  psvar[2]="[$2]"
  psvar[3]="$3"
  psvar[4]=$(print -P "%n\\\@%m:")
}

if [ $(id -u) != 0 ]; then
  # too dangerous to be run as root

  _update_vcs_prompt_vars_if_vcs_ran() {
    local vcs="$(__vcs_get_repo_type)"
    case "$(history $(($HISTCMD - 1)))" in
      # $vcs appeared in last command, so be sure to update
      *${vcs}*) __vcs_set_prompt_variables "$vcs"
    esac
  }
  precmd_functions+=(_update_vcs_prompt_vars_if_vcs_ran)

  _update_vcs_prompt_vars() {
    __vcs_set_prompt_variables
  }
  chpwd_functions+=(_update_vcs_prompt_vars)

  # call it once
  _update_vcs_prompt_vars
fi

# vim:ft=zsh
