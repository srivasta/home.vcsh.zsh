#! /bin/zsh -f
#                               -*- Mode: Sh -*-
# bindings ---
# Author           : Manoj Srivastava ( srivasta@glaurung.internal.golden-gryphon.com )
# Created On       : Wed Jul 27 07:56:42 2005
# Created On Node  : glaurung.internal.golden-gryphon.com
# Last Modified By : Manoj Srivastava
# Last Modified On : Wed May  7 01:02:32 2008
# Last Machine Used: anzu.internal.golden-gryphon.com
# Update Count     : 25
# Status           : Unknown, Use with caution!
# HISTORY          :
# Description      :
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# Copyright © 2005-2010 Manoj Srivastava <srivasta@debian.org>

# If running interactively, then:
if [[ -n "$PS1" ]]; then
    ## keybindings (run 'bindkeys' for details, more details via man zshzle)
    # use emacs style per default:
    bindkey -e

    # use vi style:
    # bindkey -v

    bindkey -N mymap emacs
    bindkey -A mymap main

    if [[ -r /etc/inputrc ]]; then
	      # bind special keys according to readline configuration
        eval "$(sed -n 's/^/bindkey /; s/: / /p' /etc/inputrc | grep -v \#)"
    fi


    # create a zkbd compatible hash;
    typeset -A key

    key[Insert]=${terminfo[kich1]}
    key[Delete]=${terminfo[kdch1]}
    key[Up]=${terminfo[kcuu1]}
    key[Down]=${terminfo[kcud1]}
    key[Left]=${terminfo[kcub1]}
    key[Right]=${terminfo[kcuf1]}
    key[PageUp]=${terminfo[kpp]}
    key[PageDown]=${terminfo[knp]}

    ######################################################################################
    ####################  Movement
    ######################################################################################
    ## with HOME/END, move to beginning/end of line (on multiline) on first keypress
    ## to beginning/end of buffer on second keypress
    ## and to beginning/end of history on (at most) the third keypress
    # terminator & non-debian xterm

    # for other keys in this hash, see: man 5 terminfo
    [[ -n "$terminfo[kich1]" ]]  && bindkey  "$terminfo[kich1]"  overwrite-mode #Insert
    [[ -n "$terminfo[kcuu1]" ]]  && bindkey  "$terminfo[kcuu1]"  up-line-or-search #Up
    [[ -n "$terminfo[kcud1]" ]]  && bindkey  "$terminfo[kcud1]"  down-line-or-search #Down
    [[ -n "$terminfo[kcub1]" ]]  && bindkey  "$terminfo[kcub1]"  backward-char #Left
    [[ -n "$terminfo[kcuf1]" ]]  && bindkey  "$terminfo[kcuf1]"  forward-char #Right


    # setup key accordingly
    [[ -z "$terminfo[kdch1]" ]] || bindkey -M emacs "$terminfo[kdch1]" delete-char #Delete
    [[ -z "$terminfo[khome]" ]] || bindkey -M emacs "$terminfo[khome]" beginning-of-somewhere
    [[ -z "$terminfo[kend]"  ]] || bindkey -M emacs "$terminfo[kend]"  end-of-somewhere

    [[ -z "$terminfo[kdch1]" ]] || bindkey -M vicmd "$terminfo[kdch1]" vi-delete-char
    [[ -z "$terminfo[khome]" ]] || bindkey -M vicmd "$terminfo[khome]" vi-beginning-of-line
    [[ -z "$terminfo[kend]"  ]] || bindkey -M vicmd "$terminfo[kend]"  vi-end-of-line

    [[ -z "$terminfo[cuu1]"  ]] || bindkey -M viins "$terminfo[cuu1]"  vi-up-line-or-history
    [[ -z "$terminfo[cuf1]"  ]] || bindkey -M viins "$terminfo[cuf1]"  vi-forward-char
    [[ -z "$terminfo[kcuu1]" ]] || bindkey -M viins "$terminfo[kcuu1]" vi-up-line-or-history #Up

    [[ -z "$terminfo[kcud1]" ]] || bindkey -M viins "$terminfo[kcud1]" vi-down-line-or-history
    [[ -z "$terminfo[kcuf1]" ]] || bindkey -M viins "$terminfo[kcuf1]" vi-forward-char
    [[ -z "$terminfo[kcub1]" ]] || bindkey -M viins "$terminfo[kcub1]" vi-backward-char

    # ncurses stuff:
    [[ "$terminfo[kcuu1]" == $'\eO'* ]] && bindkey -M viins "${terminfo[kcuu1]/O/[}" vi-up-line-or-history #Up
    [[ "$terminfo[kcud1]" == $'\eO'* ]] && bindkey -M viins "${terminfo[kcud1]/O/[}" vi-down-line-or-history
    [[ "$terminfo[kcuf1]" == $'\eO'* ]] && bindkey -M viins "${terminfo[kcuf1]/O/[}" vi-forward-char
    [[ "$terminfo[kcub1]" == $'\eO'* ]] && bindkey -M viins "${terminfo[kcub1]/O/[}" vi-backward-char
    [[ "$terminfo[khome]" == $'\eO'* ]] && bindkey -M viins "${terminfo[khome]/O/[}" beginning-of-somewhere
    [[ "$terminfo[kend]"  == $'\eO'* ]] && bindkey -M viins "${terminfo[kend]/O/[}"  end-of-somewhere
    [[ "$terminfo[khome]" == $'\eO'* ]] && bindkey -M emacs "${terminfo[khome]/O/[}" beginning-of-somewhere
    [[ "$terminfo[kend]"  == $'\eO'* ]] && bindkey -M emacs "${terminfo[kend]/O/[}"  end-of-somewhere

    #m# k Shift-tab Perform backwards menu completion
    if [[ -n "$terminfo[kcbt]" ]]; then
        bindkey "$terminfo[kcbt]" reverse-menu-complete
    elif [[ -n "$terminfo[cbt]" ]]; then # required for GNU screen
        bindkey "$terminfo[cbt]"  reverse-menu-complete
    fi

    # Finally, make sure the terminal is in application mode, when zle is
    # active. Only then are the values from $terminfo valid.
    #function zle-line-init () {
    #    echoti smkx
    #}
    #function zle-line-finish () {
    #    echoti rmkx
    #}
    #zle -N zle-line-init
    #zle -N zle-line-finish

    ######################################################################################
    ####################  History
    ######################################################################################
    # Search backward in the history for a line beginning with the current
    # line up to the cursor and move the cursor to the end of the line then
    #k# search history backward for entry beginning with typed text
    bindkey '^xp'   history-beginning-search-backward
    #k# search history forward for entry beginning with typed text
    bindkey '^xn'   history-beginning-search-forward

    bindkey "\e^R" history-pattern-search-backward

    bindkey "\e^S" history-pattern-search-forward

    #bindkey -m

    # bindkey  '^q'   quoted-insert
    bindkey  '^X^P' vi-find-prev-char
    bindkey  '^X^h' describe-key-briefly
    bindkey  '^X#'  pound-insert
    bindkey  '^X^W' where-is
    # usage example: 'ctrl-x ctrl-i' 00A7 'ctrl-x ctrl-i' will give you an ï¿½
    bindkey '^X^i' insert-unicode-char
    # increment integer to the right by 1 (or arg)
    bindkey '^X+' incarg
    # incremental word completion
    bindkey "^Xi" incremental-complete-word # C-x-i
    # magic history searching.
    bindkey '^X^Z' predict-on
    bindkey '^Z' predict-off
    # type a file pattern, and see expansion
    bindkey "^Xf" insert-files # C-x-f
    bindkey '\e=' insert-last-assignment
    bindkey "\C-w" kill-region      # Emacs C-w command support
    # power completion / abbreviation expansion / buffer expansion
    # see http://zshwiki.org/home/examples/zleiab for details
    bindkey ",." globalias
    bindkey '^xA' manoj_toggle_abbrev
    #k# Insert a timestamp on the command line (yyyy-mm-dd)
    bindkey '^Xd' insert-datestamp

    function unix_ts { LBUFFER="${LBUFFER}$(date '+%Y%m%d%H%M%S')" }
    zle -N unix_ts
    bindkey "^Xt" unix_ts

    #k# Insert last typed word
    bindkey "\em" insert-last-typed-word
    #k# prepend the current command with "sudo"
    bindkey "^Xs" sudo-command-line
    #k# jump to after first word (for adding options)
    bindkey '^x1' jump_after_first_word

    # complete word from history with menu (from Book: ZSH, OpenSource-Press)
    zle -C hist-complete complete-word _generic
    zstyle ':completion:hist-complete:*' completer _history
    #k# complete word from history with menu
    bindkey "^X^X" hist-complete

    function lock_screen { gnome-screensaver-command -a }
    zle -N lock_screen
    bindkey "^Xl" lock_screen

    zfinit

fi

# Local Variables:
# comment-start: "#"
# tab-width: 2
# mode: sh
# End:
