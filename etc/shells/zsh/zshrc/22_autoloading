# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# Created On       : Mon Jul 25 15:18:23 2005
#
# Copyright © 2005-2010 Manoj Srivastava <srivasta@debian.org>


# {{{ autoloading
zrcautoload zmv    # who needs mmv or rename?
zrcautoload history-search-end

# we don't want to quote/espace URLs on our own...
# if autoload -U url-quote-magic ; then
#    zle -N self-insert url-quote-magic
#    zstyle ':url-quote-magic:*' url-metas '*?[]^()~#{}='
# else
#    print 'Notice: no url-quote-magic available :('
# fi
alias url-quote='autoload -U url-quote-magic ; zle -N self-insert url-quote-magic'

#m# k ESC-h Call \kbd{run-help} for the 1st word on the command line
alias run-help >&/dev/null && unalias run-help
for rh in run-help{,-git,-svk,-svn}; do
    zrcautoload $rh
done; unset rh

for dir in $(find /usr/share/zsh/functions/  -maxdepth 1 -type d | egrep -v '/usr/share/zsh/functions/$' ) ; do
    for file in $(find $dir -type f | egrep -v '/_'); do
        autoload $(basename $file) && zle -N $(basename $file)
    done
done

# completion system
if zrcautoload compinit ; then
    compinit || print 'Notice: no compinit available :('
else
    print 'Notice: no compinit available :('
    function zstyle { }
    function compdef { }
fi

is4 && \
for mod in complist deltochar mathfunc ; do
    zmodload -i zsh/${mod} 2>/dev/null || print "Notice: no ${mod} available :("
done

# autoload zsh modules when they are referenced
if is4 ; then
    zmodload -a  zsh/stat    zstat
    zmodload -a  zsh/zpty    zpty
    zmodload -ap zsh/mapfile mapfile
fi

if [[ -n "$PS1" ]]; then
    is4 && zrcautoload zed # use ZLE editor to edit a file or function

    if is4 && zrcautoload insert-files && zle -N insert-files ; then
        #k# Insert files and test globbing
        bindkey "^Xf" insert-files # C-x-f
    fi

    # press esc-e for editing command line in $EDITOR or $VISUAL
    if is4 && zrcautoload edit-command-line && zle -N edit-command-line ; then
        #k# Edit the current line in \kbd{\$EDITOR}
        bindkey '\ee' edit-command-line
    fi

    function grml-zsh-fg() {
        if (( ${#jobstates} )); then
            zle .push-input
            [[ -o hist_ignore_space ]] && BUFFER=' ' || BUFFER=''
            BUFFER="${BUFFER}fg"
            zle .accept-line
        else
            zle -M 'No background jobs. Doing nothing.'
        fi
    }
    zle -N grml-zsh-fg

    autoload -U select-word-style
    zle -N select-word-style
    #select-word-style default

    # insert unicode character
    # usage example: 'ctrl-x ctrl-i' 00A7 'ctrl-x ctrl-i' will give you an ï¿½
    # See for example http://unicode.org/charts/ for unicode characters code
    autoload insert-unicode-char
    zle -N insert-unicode-char

    autoload zkbd
    function zkbd_file() {
        if [[ -e ~ZDOTDIR/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE} ]]; then
            printf '%s' ~ZDOTDIR/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}
            return 0
        else
            return 1
        fi
        return 1
    }

    ## beginning-of-line OR beginning-of-buffer OR beginning of history
    ## by: Bart Schaefer <schaefer@brasslantern.com>, Bernhard Tittelbach
    beginning-or-end-of-somewhere() {
        local hno=$HISTNO
        if [[ ( "${LBUFFER[-1]}" == $'\n' && "${WIDGET}" == beginning-of* ) || \
            ( "${RBUFFER[1]}" == $'\n' && "${WIDGET}" == end-of* ) ]]; then
            zle .${WIDGET:s/somewhere/buffer-or-history/} "$@"
        else
            zle .${WIDGET:s/somewhere/line-hist/} "$@"
            if (( HISTNO != hno )); then
                zle .${WIDGET:s/somewhere/buffer-or-history/} "$@"
            fi
        fi
    }
    zle -N beginning-of-somewhere beginning-or-end-of-somewhere
    zle -N end-of-somewhere beginning-or-end-of-somewhere
    zle -N history-pattern-search-forward history-pattern-search

    autoload -U history-pattern-search
    zle -N history-pattern-search-backward history-pattern-search

    autoload -U select-word-style
    zle -N select-word-style
    #select-word-style default

    # insert unicode character
    # usage example: 'ctrl-x ctrl-i' 00A7 'ctrl-x ctrl-i' will give you an ï¿½
    # See for example http://unicode.org/charts/ for unicode characters code
    autoload insert-unicode-char
    zle -N insert-unicode-char

    #Typing the keystrokes for this widget with the cursor placed on
    #or to the left of an integer causes that integer to be
    #incremented by one.
    autoload -U incarg
    zle -N incarg

    # This allows incremental completion of a word.
    ## After starting this command, a list of completion
    ## choices can be shown after every character you
    ## type, which you can delete with ^h or DEL.
    ## RET will accept the completion so far.
    ## You can hit TAB to do normal completion, ^g to
    ## abort back to the state when you started, and ^d to list the matches.
    autoload -U incremental-complete-word
    zle -N incremental-complete-word

    ## This set of functions implements a sort of magic history searching.
    ## After predict-on, typing characters causes the editor to look backward
    ## in the history for the first line beginning with what you have typed so
    ## far.  After predict-off, editing returns to normal for the line found.
    ## In fact, you often don't even need to use predict-off, because if the
    ## line doesn't match something in the history, adding a key performs
    ## standard completion - though editing in the middle is liable to delete
    ## the rest of the line.
    autoload -U predict-on
    zle -N predict-on
    zle -N predict-off

    ## This function allows you type a file pattern,
    ## and see the results of the expansion at each step.
    ## When you hit return, they will be inserted into the command line.
    autoload -U insert-files
    zle -N insert-files

    autoload -U smart-insert-last-word
    zle -N insert-last-word smart-insert-last-word
    zle -N insert-last-assignment smart-insert-last-word
    zstyle :insert-last-assignment match '[[:alpha:]][][[:alnum:]]#=*'

    # add a command line to the shells history without executing it
    commit-to-history() {
        print -s ${(z)BUFFER}
        zle send-break
    }
    zle -N commit-to-history

    # power completion - abbreviation expansion {{{
    # power completion / abbreviation expansion / buffer expansion
    # see http://zshwiki.org/home/examples/zleiab for details
    # less risky than the global aliases but powerful as well
    # just type the abbreviation key and afterwards ',.' to expand it
    declare -A abk
    abk=(
    #   key   # value                  (#d additional doc string)
        '...'  '../..'
        '....' '../../..'
        'BG'   '& exit'
        'C'    '| wc -l'
        'G'    '|& grep --color=auto '
        'H'    '| head'
        'Hl'   ' --help |& less -r'    #d (Display help in pager)
        'L'    '| less'
        'LL'   '|& less -r'
        'M'    '| most'
        'N'    '&>/dev/null'           #d (No Output)
        'R'    '| tr A-z N-za-m'       #d (ROT13)
        'SL'   '| sort | less'
        'S'    '| sort -u'
        'T'    '| tail'
        'V'    '|& vim -'
        'co'   './configure && make && sudo make install'
    )

    globalias() {
        emulate -L zsh
        setopt extendedglob
        local MATCH

        if (( NOABBREVIATION > 0 )) ; then
            LBUFFER="${LBUFFER},."
            return 0
        fi

        matched_chars='[.-|_a-zA-Z0-9]#'
        LBUFFER=${LBUFFER%%(#m)[.-|_a-zA-Z0-9]#}
        LBUFFER+=${abk[$MATCH]:-$MATCH}
    }

    zle -N globalias

    ## toggle the ,. abbreviation feature on/off
    # NOABBREVIATION: default abbreviation-state
    #                 0 - enabled (default)
    #                 1 - disabled
    NOABBREVIATION=${NOABBREVIATION:-0}

    manoj_toggle_abbrev() {
        if (( ${NOABBREVIATION} > 0 )) ; then
            NOABBREVIATION=0
        else
            NOABBREVIATION=1
        fi
    }

    zle -N manoj_toggle_abbrev

    # press "ctrl-e d" to insert the actual date in the form yyyy-mm-dd
    insert-datestamp() { LBUFFER+=${(%):-'%D{%Y-%m-%d}'}; }
    zle -N insert-datestamp


    # press esc-m for inserting last typed word again (thanks to caphuso!)
    insert-last-typed-word() { zle insert-last-word -- 0 -1 };
    zle -N insert-last-typed-word;

    # run command line as user root via sudo:
    sudo-command-line() {
        [[ -z $BUFFER ]] && zle up-history
        if [[ $BUFFER != sudo\ * ]]; then
            BUFFER="sudo $BUFFER"
            CURSOR=$(( CURSOR+5 ))
        fi
    }
    zle -N sudo-command-line


    ### jump behind the first word on the cmdline.
    ### useful to add options.
    function jump_after_first_word() {
        local words
        words=(${(z)BUFFER})

        if (( ${#words} <= 1 )) ; then
            CURSOR=${#BUFFER}
        else
            CURSOR=${#${words[1]}}
        fi
    }
    zle -N jump_after_first_word

    autoload -U zfinit

    ## complete word from currently visible Screen or Tmux buffer.
    if check_com -c screen || check_com -c tmux; then
        _complete_screen_display() {
            [[ "$TERM" != "screen" ]] && return 1

            local TMPFILE=$(mktemp)
            local -U -a _screen_display_wordlist
            trap "rm -f $TMPFILE" EXIT

            # fill array with contents from screen hardcopy
            if ((${+TMUX})); then
                #works, but crashes tmux below version 1.4
                #luckily tmux -V option to ask for version, was also added in 1.4
                tmux -V &>/dev/null || return
                tmux -q capture-pane \; save-buffer -b 0 $TMPFILE \; delete-buffer -b 0
            else
                screen -X hardcopy $TMPFILE
                #screen sucks, it dumps in latin1, apparently always. so recode it to system charset
                check_com recode && recode latin1 $TMPFILE
            fi
            _screen_display_wordlist=( ${(QQ)$(<$TMPFILE)} )
            # remove PREFIX to be completed from that array
            _screen_display_wordlist[${_screen_display_wordlist[(i)$PREFIX]}]=""
            compadd -a _screen_display_wordlist
        }
        #k# complete word from currently visible GNU screen buffer
        bindkey -r "^XS"
        compdef -k _complete_screen_display complete-word '^XS'
    fi
fi
# }}}

# Local Variables:
# comment-start: "#"
# tab-width: 2
# mode: sh
# End:
